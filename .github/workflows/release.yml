name: 'AlgoSec Customer CI/CD Workflow'
on:
  pull_request:
    branches:
      - 'main'
jobs:
 
#   changedfiles:
#     name: 'Scan code changes'
#     runs-on: ubuntu-latest
#     # Map a step output to a job output
#     outputs:
#       all: ${{ steps.changes.outputs.all}}
#       terraform: ${{ steps.changes.outputs.terraform }}
#       matrix: ${{ steps.changes.outputs.matrix }}
#       debug: ${{ steps.check_debug.outputs.debug }}
#     steps:
#       # Make sure we have some code to diff.
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       - name: Check debug flag
#         id: check_debug
#         run: echo "::set-output debug=$(if [ -z ${{ secrets.ALGOSEC_IS_DEBUG }} ]; then echo false; else echo true; fi;)"

#       - name: Get changed files
#         id: changes
#         # Set outputs using the command.
#         run: |
#           # Pull Request
#           git fetch origin "${{ github.base_ref }}" --depth=1
#           # Get the list of all changed resources
#           diff_result=$(git diff --name-only "origin/${{ github.base_ref }}" ${{ github.sha }} )
#           echo "Diff between origin/${{ github.base_ref }} and ${{ github.sha }}"

#           # Extract terraform's files
#           terraform_files=$(echo $diff_result | tr -s '[[:space:]]' '\n' | grep -o '.*\.tf$')
#           echo "Changed Terraform's files: $terraform_files"

#           #extract folders where the changed teraforms files are stored
#           #and create json to proceed them in the matrix style
#           matrix_output="{\"include\":[ "
#           for line in in $terraform_files
#           do 
#             if [[ $line == *".tf"* ]];
#             then
#               echo "Working line: $line" 
#               dir=$(dirname $line) 
#               echo "extracted dir: $dir"
#               matrix_output="$matrix_output{\"folder\":\"$dir\"},"
#             fi
#           done
#           matrix_output="$matrix_output ]}"

#           echo "Prepared working matrix: $matrix_output"
#           echo "::set-output name=matrix::${matrix_output}"

#   echomatrix:

#     needs: [changedfiles]
#     if: needs.changedfiles.outputs.debug == true
#     runs-on: ubuntu-latest
#     steps:
#       - name: echo
#         run: echo ${{ needs.changedfiles.outputs.matrix }}

  algosec-risk-analysis-action:
     name: 'Algosec Risk Analysis Test'
     runs-on: ubuntu-latest
#      needs: changedfiles
#      strategy:
#       matrix: ${{fromJson(needs.changedfiles.outputs.matrix)}}
#      defaults:
#       run:
#         working-directory: ${{ matrix.folder }}
     steps:
      - name: debug
        uses: hmarr/debug-action@v2
      - name: checkout repo
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#           cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: 'Typescript Risk Analysis Action'
        uses: alonnalgo/action-test@v0.0.15

        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          RA_API_URL: ${{ secrets.RA_API_URL }}
          AWS_S3: ${{ secrets.AWS_S3 }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  # AlgosecRiskAnalysisWorkflow:
  #   uses: algosec/risk-analysis-workflow/.github/workflows/release.yml@main
  #   secrets:
  #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
  #     TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
